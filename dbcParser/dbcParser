# -*- coding: utf-8 -*- 
'''
Created on 9th Mar, 2018

@author: Alvin Ye

'''
from dbcCoreModel import CoreModel
import re
# import codecs
#import io


class dbcParser(object):


    '''
    this class acts as interface between dbc file and dbcCoreModels through regular express engine.
    '''

    def __init__(self):
        '''
        Constructor
        '''
        self._canNetwork = CoreModel.CanNetwork()
        self.keyWords = {'version':self.version_hdl,
                         'BU_':self.node_hdl,
                         'BO_ ':self.msg_hdl,
                         ' SG_ ':self.signal_hdl}
        self._currentNode = None
        self._currentMsg = None
        self._currentSignal = None
        self.patten = ''
        
    def parser_dbc(self,file):
        with open(file, "r") as f:
            for line in f:
                self.parse_line(line)
    def parse_line(self,line):
        for key,func in self.keyWords.items():
            if line.startswith(key):
                line = line.strip()
                func(line)
        
    def version_hdl(self, line):
        self.patten = 'version\s+"(?P<version>\S+)"'
        reg = re.search(self.patten, line)
        try:
            self._canNetwork.version = reg.group('version')
        except:
            print("[WARINING]: version definition violation")
        
    def node_hdl(self,line):
        self.patten = 'BU_\s*:\s*(?P<nodes>.+)\s*'
        reg = re.search(self.patten ,line)
        reg = re.sub('\s+', ' ', reg.group('nodes')).strip()
        try:
            for node_name in reg.split(' '):
                self._canNetwork.append_nodes(node_name,CoreModel.CanNode(node_name))
        except:
            print('[WARINING]: node definition violation')

    def msg_hdl(self, line):
        self.patten = 'BO_\s+(?P<msg_id>\d+)\s+(?P<msg_name>\S+)\s*:\s*(?P<length>\d+)\s+(?P<msg_sender>\S+)'
        reg = re.search(self.patten, line)
        try:
            self._currentmsg_sender = self._canNetwork._nodes[reg.group('msg_sender')]
        except KeyError:
            print('[WARINING]: the msg sender {0} is not in the list of node definition'.format(reg.group('msg_sender')))
            self._currentmsg_sender = CoreModel.CanNode(reg.group('msg_sender'))
            self._canNetwork.append_nodes(self._currentmsg_sender.node_name, self._currentmsg_sender)
            
        #create a message object 
        try:   
            self._currentMsg = CoreModel.CanMsg(int(reg.group('msg_id')), reg.group('msg_name'), int(reg.group('length')), msg_sender=self._currentmsg_sender)
        except:
            print("[WARINING] message definition violation")
        #add this message to parent node's tx message
        self._canNetwork.nodes[self._currentMsg.msg_sender.node_name].append_tx_msg(self._currentMsg.msg_name, self._currentMsg)

              
    def signal_hdl(self, line):
        self.pattern  = 'SG_\s+(?P<name>\S+)\s*(?P<isMultiplexer>M)?(?P<multiplexerId>m\d+)?\s*:\s*'
        self.pattern += '(?P<startBit>\d+)\|(?P<length>\d+)\@(?P<little_endian>[0|1])(?P<signed>[\+|\-])\s*'
        self.pattern += '\(\s*(?P<factor>\S+)\s*,\s*(?P<offset>\S+)\s*\)\s*'
        self.pattern += '\[\s*(?P<valueMin>\S+)\s*\|\s*(?P<valueMax>\S+)\s*\]\s*"?(?P<unit>[^"]*)?"?\s+(?P<receivers>.+)'
        reg = re.search(self.pattern, line)
        #create a signal object
        try:
            self._currentSignal= CoreModel.CanSignal(reg.group('name'),int(reg.group('startBit')),int(reg.group('length')),int(reg.group('little_endian')),reg.group('signed'),
                                                 float(reg.group('factor')),float(reg.group('offset')),float(reg.group('valueMin')),float(reg.group('valueMax')),reg.group('unit'),
                                                 reg.group('isMultiplexer'),reg.group('multiplexerId'),msg_carrier = self._currentMsg)
        except:
            print("[WARNING]: signal definition violation")
        #add this signal to parent msg
        self._currentMsg.append_signal(self._currentSignal.signal_name, self._currentSignal)
        
    def iterate_dbc(self, f):
        for node_name, node in self._canNetwork.nodes.items():
            f.write("{0}\n".format(node_name))
            for msg_name, msg in node.node_tx_msgs.items():
                f.write("\t{0}\n".format(msg_name))
                for signal_name, signal in msg.msg_signals.items():
                    f.write("\t\t{0},start:{1},len:{2},endian:{3},sign:{4},factor:{5},offset:{6},Min:{7},Max:{8},unit:{9}\n"
                          .format(signal_name,signal.signal_start_bit,signal.signal_len,signal.signal_little_endian,signal.signal_signed,signal.signal_factor,signal.signal_offset,signal.signal_min_values,signal.signal_max_value,signal.signal_unit))
