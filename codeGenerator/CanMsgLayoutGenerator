'''
Created on 13th,March,2018

@author: Alvin Ye
'''
class c_bitField_Genertor():
    
    def __init__(self,laidSignals):
        self._laidSignals = laidSignals
        self._byteSlicedSignals= [[]]
        self._syntax_type = 'uint8'
        self._syntax_struct = 'struct'
        self._syntax_def    = 'typedef'
        self._syntax_delimiter = ":"
        self._syntax_ending = ';\n'
        self._totalLen = 0
        self._byteIdx = 0
        
    def byteSlicer(self):
        for signal in self._laidSignals.values():
            self._totalLen += signal.SignalLength
            if self._totalLen <= (self._byteIdx+1)*8:
                self._byteSlicedSignals[self._byteIdx].append(signal)
            else:
                self._byteSlicedSignals.append([])
                self._byteIdx +=1
                self._byteSlicedSignals[self._byteIdx].append(signal)
        return self._byteSlicedSignals
    
    def bitField_Genertor(self,file):
        for byteslice in self.byteSlicer():
            byteslice.reverse()
            for signal in byteslice:
                file.write(self.c_syntax_structor(signal.SignalName, signal.SignalLength))
    def c_syntax_structor(self,signalName,signalLenth):
        return ('\t'+self._syntax_type+' '+signalName+self._syntax_delimiter+str(signalLenth)+self._syntax_ending)
        
# if __name__ == "__main__":
#     import sys
#     myParser = dbcParser()
#     try:
#         myParser.parseDbc(sys.argv[1])
#         print('INFO: dbc parsing succeed')
#         with open(sys.argv[2],'w') as f:
#             for msg in myParser._canNetwork.Nodes['ESCL'].NodeTxMsgs.values():
#                 f.write("typedef struct _c_{0}_msgTypeTag\n".format(msg.MsgName))
#                 f.write("{\n")
#                 for signalName,signal in CanMsgLayoutDecoder(msg).createLayout().items():
#                     f.write("\tuint8 {0} : {1};\n".format(signalName, signal.SignalLength))
#                 f.write("}")    
#                 f.write("_c_{0}_msgType;\n".format(msg.MsgName))
#             print("INFO: file generation succeed")
#     except UnicodeDecodeError:
#         print("dbc decoding error, please convert dbc to utf-8 first")
#     except KeyError:
#         print("input the correct name of ESCL")
#     except:
#         print("ERROR: no dbc file designated")    
# 

                 
